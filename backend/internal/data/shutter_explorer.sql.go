// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shutter_explorer.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const queryDecryptedTXForEncryptedTX = `-- name: QueryDecryptedTXForEncryptedTX :many
SELECT 
    dt.tx_hash, dt.tx_status,
    tse.encrypted_transaction,
    dk.key
FROM decrypted_tx dt 
INNER JOIN transaction_submitted_event tse ON dt.transaction_submitted_event_id = tse.id
INNER JOIN decryption_key dk ON dt.decryption_key_id = dk.id
WHERE tse.encrypted_transaction = $1
`

type QueryDecryptedTXForEncryptedTXRow struct {
	TxHash               []byte
	TxStatus             interface{}
	EncryptedTransaction []byte
	Key                  []byte
}

func (q *Queries) QueryDecryptedTXForEncryptedTX(ctx context.Context, encryptedTransaction []byte) ([]QueryDecryptedTXForEncryptedTXRow, error) {
	rows, err := q.db.Query(ctx, queryDecryptedTXForEncryptedTX, encryptedTransaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryDecryptedTXForEncryptedTXRow
	for rows.Next() {
		var i QueryDecryptedTXForEncryptedTXRow
		if err := rows.Scan(
			&i.TxHash,
			&i.TxStatus,
			&i.EncryptedTransaction,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryGreeter = `-- name: QueryGreeter :many
SELECT hello from greeter
`

func (q *Queries) QueryGreeter(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, queryGreeter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var hello string
		if err := rows.Scan(&hello); err != nil {
			return nil, err
		}
		items = append(items, hello)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryIncludedTransactions = `-- name: QueryIncludedTransactions :many
SELECT dt.tx_hash, tse.encrypted_transaction, dt.created_at
FROM decrypted_tx dt
INNER JOIN transaction_submitted_event tse ON dt.transaction_submitted_event_id = tse.id
WHERE dt.tx_status = 'included'
ORDER BY dt.created_at
LIMIT $1
`

type QueryIncludedTransactionsRow struct {
	TxHash               []byte
	EncryptedTransaction []byte
	CreatedAt            pgtype.Timestamptz
}

func (q *Queries) QueryIncludedTransactions(ctx context.Context, limit int32) ([]QueryIncludedTransactionsRow, error) {
	rows, err := q.db.Query(ctx, queryIncludedTransactions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryIncludedTransactionsRow
	for rows.Next() {
		var i QueryIncludedTransactionsRow
		if err := rows.Scan(&i.TxHash, &i.EncryptedTransaction, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryLatestPendingTXsWhichCanBeDecrypted = `-- name: QueryLatestPendingTXsWhichCanBeDecrypted :many
WITH latest_per_hash AS (
  SELECT 
    tx_hash,
    MAX(created_at) AS latest_created_at
  FROM decrypted_tx d0
  WHERE 
    tx_status = 'not included'
    AND NOT EXISTS(
      SELECT 1 FROM decrypted_tx d1 WHERE d1.tx_hash = d0.tx_hash AND tx_status = 'included'
    )
  GROUP BY tx_hash
),
latest_transactions AS (
  SELECT 
    tx_hash,
    latest_created_at
  FROM latest_per_hash
  ORDER BY latest_created_at DESC
  LIMIT $1
)
SELECT 
  '0x' || encode(lt.tx_hash, 'hex') AS tx_hash,
  lt.latest_created_at AS created_at
FROM latest_transactions lt
`

type QueryLatestPendingTXsWhichCanBeDecryptedRow struct {
	TxHash    interface{}
	CreatedAt interface{}
}

func (q *Queries) QueryLatestPendingTXsWhichCanBeDecrypted(ctx context.Context, limit int32) ([]QueryLatestPendingTXsWhichCanBeDecryptedRow, error) {
	rows, err := q.db.Query(ctx, queryLatestPendingTXsWhichCanBeDecrypted, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryLatestPendingTXsWhichCanBeDecryptedRow
	for rows.Next() {
		var i QueryLatestPendingTXsWhichCanBeDecryptedRow
		if err := rows.Scan(&i.TxHash, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryLatestTXsWhichArentIncluded = `-- name: QueryLatestTXsWhichArentIncluded :many
WITH latest_events AS (
    SELECT DISTINCT ON (encrypted_transaction)
        id,
        encrypted_transaction,
        created_at
    FROM transaction_submitted_event
    ORDER BY encrypted_transaction, created_at DESC
	  LIMIT $1
),
decryption_status AS (
    SELECT
        encrypted_transaction,
        MAX(tx_status) AS max_status
    FROM decrypted_tx
    JOIN latest_events le ON decrypted_tx.transaction_submitted_event_id = le.id
    GROUP BY encrypted_transaction
)
SELECT
    le.encrypted_transaction,
    le.created_at
FROM latest_events le
LEFT JOIN decryption_status ds ON le.encrypted_transaction = ds.encrypted_transaction
WHERE ds.max_status IS DISTINCT FROM 'included' OR ds.max_status IS NULL
ORDER BY le.created_at DESC
`

type QueryLatestTXsWhichArentIncludedRow struct {
	EncryptedTransaction []byte
	CreatedAt            pgtype.Timestamptz
}

func (q *Queries) QueryLatestTXsWhichArentIncluded(ctx context.Context, limit int32) ([]QueryLatestTXsWhichArentIncludedRow, error) {
	rows, err := q.db.Query(ctx, queryLatestTXsWhichArentIncluded, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryLatestTXsWhichArentIncludedRow
	for rows.Next() {
		var i QueryLatestTXsWhichArentIncludedRow
		if err := rows.Scan(&i.EncryptedTransaction, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryTotalTXsForEachTXStatus = `-- name: QueryTotalTXsForEachTXStatus :one
SELECT COUNT(*) FROM public.decrypted_tx where tx_status = $1
`

func (q *Queries) QueryTotalTXsForEachTXStatus(ctx context.Context, txStatus interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, queryTotalTXsForEachTXStatus, txStatus)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const queryTotalTXsForEachTXStatusPerMonth = `-- name: QueryTotalTXsForEachTXStatusPerMonth :many
SELECT 
    TO_CHAR(DATE_TRUNC('month', created_at), 'YYYY-MM-DD') AS month, 
    COUNT(*) AS total_txs
FROM decrypted_tx
WHERE tx_status = $1
GROUP BY DATE_TRUNC('month', created_at)
ORDER BY month
`

type QueryTotalTXsForEachTXStatusPerMonthRow struct {
	Month    string
	TotalTxs int64
}

func (q *Queries) QueryTotalTXsForEachTXStatusPerMonth(ctx context.Context, txStatus interface{}) ([]QueryTotalTXsForEachTXStatusPerMonthRow, error) {
	rows, err := q.db.Query(ctx, queryTotalTXsForEachTXStatusPerMonth, txStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryTotalTXsForEachTXStatusPerMonthRow
	for rows.Next() {
		var i QueryTotalTXsForEachTXStatusPerMonthRow
		if err := rows.Scan(&i.Month, &i.TotalTxs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryTxHashFromTransactionDetails = `-- name: QueryTxHashFromTransactionDetails :many
SELECT DISTINCT ON (encrypted_tx_hash) 
    encrypted_tx_hash, 
    tx_hash
FROM  transaction_details
WHERE encrypted_tx_hash IN (SELECT UNNEST($1::text[]))
ORDER BY encrypted_tx_hash, submission_time DESC
`

type QueryTxHashFromTransactionDetailsRow struct {
	EncryptedTxHash string
	TxHash          string
}

func (q *Queries) QueryTxHashFromTransactionDetails(ctx context.Context, dollar_1 []string) ([]QueryTxHashFromTransactionDetailsRow, error) {
	rows, err := q.db.Query(ctx, queryTxHashFromTransactionDetails, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryTxHashFromTransactionDetailsRow
	for rows.Next() {
		var i QueryTxHashFromTransactionDetailsRow
		if err := rows.Scan(&i.EncryptedTxHash, &i.TxHash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
