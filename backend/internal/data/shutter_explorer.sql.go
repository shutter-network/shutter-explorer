// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shutter_explorer.sql

package data

import (
	"context"
)

const queryDecryptedTXForEncryptedTX = `-- name: QueryDecryptedTXForEncryptedTX :many
SELECT 
    dt.tx_hash, dt.tx_status,
    tse.encrypted_transaction,
    dk.key
from decrypted_tx dt 
INNER JOIN transaction_submitted_event tse ON dt.transaction_submitted_event_id = tse.id
INNER JOIN decryption_key dk ON dt.decryption_key_id = dk.id
WHERE tse.encrypted_transaction = $1
`

type QueryDecryptedTXForEncryptedTXRow struct {
	TxHash               []byte
	TxStatus             interface{}
	EncryptedTransaction []byte
	Key                  []byte
}

func (q *Queries) QueryDecryptedTXForEncryptedTX(ctx context.Context, encryptedTransaction []byte) ([]QueryDecryptedTXForEncryptedTXRow, error) {
	rows, err := q.db.Query(ctx, queryDecryptedTXForEncryptedTX, encryptedTransaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueryDecryptedTXForEncryptedTXRow
	for rows.Next() {
		var i QueryDecryptedTXForEncryptedTXRow
		if err := rows.Scan(
			&i.TxHash,
			&i.TxStatus,
			&i.EncryptedTransaction,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryGreeter = `-- name: QueryGreeter :many
SELECT hello from greeter
`

func (q *Queries) QueryGreeter(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, queryGreeter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var hello string
		if err := rows.Scan(&hello); err != nil {
			return nil, err
		}
		items = append(items, hello)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
