name: shutter-explorer
services:
  observer:
    build:
      context: ../observer/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "4000:4000"
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL}
        loki-external-labels: |
          job=observer
    environment:
        DB_HOST: db
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: ${OBSERVER_DB_PASSWORD}
        DB_NAME: postgres
        DB_SSL_MODE: disable
        P2P_BOOTSTRAP_ADDRESSES:
        P2P_ENVIRONMENT: 
        P2P_DISCOVERY_NAMESPACE:
        INCLUSION_DELAY: ${INCLUSION_DELAY} 
        
    command: ["start", "--rpc-url", "${RPC_URL}", "--beacon-api-url", "${BEACON_API_URL}", "--sequencer-contract-address", "${SEQUENCER_CONTRACT_ADDRESS}", "--validator-registry-contract-address", "${VALIDATOR_REGISTRY_CONTRACT_ADDRESS}", "--p2pkey", "${P2P_KEY}", "--inclusion-delay", "${INCLUSION_DELAY}"]

  db:
    image: postgres:14.12
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${OBSERVER_DB_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_interval: "2s"
      start_period: "30s"
      interval: "30s"
      timeout: "5s"
      retries: 3

  backend:
    build: 
      context: ../backend/
      dockerfile: Dockerfile
    restart: always
    depends_on: 
      - observer
    logging:
      driver: loki
      options:
        loki-url: ${LOKI_URL}
        loki-external-labels: |
          job=explorer-backend
    environment:
      SERVER_PORT: 5000
      OBSERVER_DB_HOST: db
      OBSERVER_DB_PORT: 5432
      OBSERVER_DB_USER: postgres
      OBSERVER_DB_PASSWORD: ${OBSERVER_DB_PASSWORD}
      OBSERVER_DB_NAME: postgres
      OBSERVER_DB_SSL_MODE: disable
      ERPC_DB_HOST: 
      ERPC_DB_PORT: 
      ERPC_DB_USER: 
      ERPC_DB_PASSWORD: 
      ERPC_DB_NAME: 
      ERPC_DB_SSL_MODE: 
      GENESIS_TIMESTAMP: 
      SLOT_DURATION: 
      SLOTS_PER_EPOCH: 
      TOTAL_GNOSIS_VALIDATORS: 
    command: ["./backend"]
    labels:
      caddy: "${SERVICE_DOMAIN_NAME}"
      caddy.@browser: "method GET"
      caddy.reverse_proxy: "{{ upstreams 5000 }}"
      caddy.header.Access-Control-Allow-Origin: "*"
      caddy.header.Access-Control-Allow-Methods: "GET, POST, OPTIONS"
      caddy.header.Access-Control-Allow-Headers: "Content-Type, Authorization"

  caddy:
    image: lucaslorentz/caddy-docker-proxy:latest
    restart: always
    volumes:
      - ${DATA_DIR:-./data}/caddy:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
      - "443:443"
      - "443:443/udp"
    labels:
      caddy.email: "devops@brainbot.com"